<project name="common" basedir="." default="main">
	<property name="deb.control.builddepends" value="debhelper (>= 7.0.50~)" />
	<property name="deb.control.depends" value="" />
	<property name="deb.control.predepends" value="" />
	<property name="deb.control.recommends" value="" />
	<property name="deb.control.suggests" value="" />
	<property name="deb.control.conflicts" value="" />
	<property name="deb.control.provides" value="" />
	<property name="deb.control.section" value="" />
	<property name="deb.control.architecture" value="all" />

	<!-- Always Edited Stuff -->
	<property name="app.name" value="example" />
	<property name="app.version" value="1.0" />
	<property name="app.description" value="Example" />
	<property name="deb.control.maintainer" value="example@example.com" />
	<property name="deb.control.homepage" value="http://www.example.com" />
	<property name="deb.maintainer.name" value="Example" />
	<property name="deb.maintainer.email" value="example@example.com" />
	<property name="deb.distribution" value="example" />

	<!-- Rarely edited stuff .. -->
	<property name="build.type" value="0" /> <!-- 0 = Local build, 1 = Develop Build, 2 = Release/Master build. -->
	<property name="deb.template" value="${project.basedir}/build/common/deb-template" />
	<property name="deb.changelog" value="* ToDo" />
	<property name="deb.urgency" value="low" />
	<property name="deb.control.priority" value="optional" />
	<property name="deb.control.essential" value="no" />

	<!-- Even more rarely edited stuff... -->
	<property name="build.dir"               value="${project.basedir}/build" />
	<property name="build.dir.logs"          value="${build.dir}/logs" />
	<property name="build.dir.target"        value="${build.dir}/target" />
	<property name="build.dir.deb"           value="${build.dir}/deb" />
	<property name="build.dir.deb.root"      value="${build.dir.deb}/root" />
	<property name="build.dir.dist"          value="${build.dir}/dist" />
	
	<property name="deb.target"              value="${build.dir.deb}" />
	<property name="deb.control.package"     value="${app.name}" />
	<property name="deb.control.source"      value="${deb.control.package}" />
	<property name="deb.control.description" value="${app.description}" />
	<property name="deb.control.version"     value="UNKNOWN" />
	<property name="deb.date"                value="" />

	<target name="prepare">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir.logs}" />
		<mkdir dir="${build.dir.target}" />
		<mkdir dir="${build.dir.deb}" />
		<mkdir dir="${build.dir.deb.root}" />
		<mkdir dir="${build.dir.dist}" />
		<mkdir dir="${build.dir.dist}/zip" />
		<mkdir dir="${build.dir.dist}/deb" />

		<exec command="date -R" outputProperty="deb.date" />
	</target>

	<target name="_build-prepare" depends="prepare,determine-version-number">
		<delete dir="${build.dir.target}" />
		<delete dir="${build.dir.deb}" />
	</target>

	<target name="_clean">
		<delete dir="${build.dir.logs}" />
		<delete dir="${build.dir.target}" />
		<delete dir="${build.dir.deb}" />
		<delete dir="${build.dir.dist}" />
	</target>

	<target name="_ci" depends="build,package">
		
	</target>

	<target name="_package-zip" depends="">
		<zip destfile="${build.dir.dist}/zip/${app.name}-${build.version}.zip" prefix="${app.name}-${build.version}/">
			<fileset dir="${build.dir.target}">
				<include name="**" />
			</fileset>
		</zip>
	</target>

	<target name="_package-deb" depends="prepare">
		<copy todir="${build.dir.deb.root}/debian" overwrite="true">
			<filterchain>
				<expandproperties/>
			</filterchain>
			<fileset dir="${deb.template}">
				<include name="**" />
			</fileset>
		</copy>
		
		<if>
			<isset property="deb.signwith" />
			<then>
				<exec command="dpkg-buildpackage -rfakeroot -k${deb.signwith}" checkreturn="true" dir="${build.dir.deb.root}" />
			</then>
			<else>
				<exec command="dpkg-buildpackage -rfakeroot -uc -us" checkreturn="true" dir="${build.dir.deb.root}" />
			</else>
		</if>

		<copy todir="${build.dir.dist}/deb" overwrite="true">
			<fileset dir="${build.dir.deb}">
				<!--TODO: Get specific names here! -->
				<include name="*.changes" />
				<include name="*.deb" />
				<include name="*.dsc" />
				<include name="*.tar.gz" />
			</fileset>
		</copy>
		
		<delete>
			<fileset dir="${build.dir.deb}">
				<!--TODO: Get specific names here! -->
				<include name="*.changes" />
				<include name="*.deb" />
				<include name="*.dsc" />
				<include name="*.tar.gz" />
			</fileset>
		</delete>
	</target>

	<target name="_publish-deb-dupload">
		<!-- Warning: Fails with unsigned debs -->
		<exec command="dupload --to ${publish.dupload.target}" checkreturn="true" dir="${build.dir.dist}/deb" />
	</target>

	<target name="determine-version-number">
		<if>
			<isset property="build.version" />
			<else>
				<if>
					<and>
						<!-- basically - are we running inside hudson? -->
						<isset property="env.BUILD_NUMBER" />
					</and>
					<then>
						<php function="str_replace" returnProperty="tmp.git_branch">
							<param value="origin/" />
							<param value="" />
							<param value="${env.GIT_BRANCH}" />
						</php>
						<php function="str_replace" returnProperty="tmp.git_branch2">
							<param value="/" />
							<param value="-" />
							<param value="${tmp.git_branch}" />
						</php>
						<property name="build.version" value="${app.version}-build${env.BUILD_NUMBER}-${tmp.git_branch2}" override="true"/>
						<property name="deb.control.version" value="${app.version}-${build.type}-build${env.BUILD_NUMBER}-${tmp.git_branch2}" override="true"/>
					</then>
					<else>
						<property name="build.version" value="${app.version}-local"  override="true"/>
						<property name="deb.control.version" value="${app.version}-${build.type}"  override="true"/>
					</else>
				</if>
			</else>
		</if>
	</target>

	<!--
	Targets we assume the user will override goes below..
	-->
	<target name="build" depends="_build-prepare">
		<!--
		This default assumes your files simply need to be copied to the target directory
		e.g. $basedir/usr/bin/example where this file is $basedir/build.xml
		-->
		<copy todir="${build.dir.target}" overwrite="true">
			<fileset dir="${project.basedir}">
				<include name="**" />

				<exclude name="nbproject/**" />
				<exclude name="build/**" />
				<exclude name="build.*" />
				<exclude name="*.properties" />
				<exclude name="**/.git/**" />
				<exclude name="**/.git*" />
			</fileset>
		</copy>
	</target>
	
	<target name="_package" depends="build">
		<phingcall target="package-zip" />
	</target>

	<target name="package-zip">
		<!--
		This default assumes the build .zip should be an exact copy of the build target.
		-->
		
		<phingcall target="_package-zip" />
	</target>

	<target name="package-deb">
		<!--
		This example assumes your files are pre-organised into the correct folder structures..
		e.g. $basedir/usr/bin/example where this file is $basedir/build.xml
		-->
		<copy todir="${build.dir.deb.root}">
			<fileset dir="${build.dir.target}">
				<include name="**" />
			</fileset>
		</copy>

		<phingcall target="_package-deb" />
	</target>

	<target name="publish-deb">
		<phingcall target="_publish-deb-dupload" />
	</target>

	<target name="ci">
		<phingcall target="_ci" />
	</target>

	<target name="clean">
		<phingcall target="_clean" />
	</target>

</project>
